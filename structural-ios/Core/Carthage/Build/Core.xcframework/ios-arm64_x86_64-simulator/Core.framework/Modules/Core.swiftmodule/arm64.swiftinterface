// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.5.2 (swiftlang-1300.0.47.5 clang-1300.0.29.30)
// swift-module-flags: -target arm64-apple-ios14.1-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name Core
@_exported import Core
import Swift
import UIKit
import _Concurrency
public protocol BaseViewControllerFactoryProtocol {
  associatedtype BusinessModel
  associatedtype Analytics
  var businessModel: Self.BusinessModel { get set }
  var defaultAnalytics: Self.Analytics { get set }
  var customAnalytics: Self.Analytics { get set }
}
open class BaseViewControllerFactory<BusinessModel, Analytics> : Core.BaseViewControllerFactoryProtocol {
  public var businessModel: BusinessModel?
  public var defaultAnalytics: Analytics?
  public var customAnalytics: Analytics?
  public init(businessModel: BusinessModel?, defaultAnalytics: Analytics?, customAnalytics: Analytics?)
  @objc deinit
}
public struct Deeplink<T> {
  public let value: T?
  public let url: Foundation.URL?
  public init(value: T?, url: Foundation.URL?)
}
public struct Journey : Swift.Hashable, Swift.RawRepresentable {
  public var rawValue: Swift.String
  public init(rawValue: Swift.String)
  public typealias RawValue = Swift.String
}
public enum BaseFlowDelegateAction {
  case finish(_: Core.Journey)
  case goTo(_: Core.Journey, currentJourney: Core.Journey)
  case finishCurrentAndGoTo(_: Core.Journey, currentJourney: Core.Journey)
}
public protocol Deeplinkable : AnyObject {
  func resolveDeeplinkIfNeeded(from controller: UIKit.UIViewController)
}
public protocol BaseFlowDelegate : AnyObject {
  func perform(_ action: Core.BaseFlowDelegateAction, in viewController: UIKit.UIViewController, with value: Any?)
}
public protocol BaseFlowDataSource : AnyObject {
  func get(_ journey: Core.Journey, from currentJourney: Core.Journey, with baseFlowDelegate: Core.BaseFlowDelegate, customAnalytics: Any?) -> UIKit.UIViewController
}
public protocol ModuleHandler {
  func start(from url: Foundation.URL?, with baseFlowDelegate: Core.BaseFlowDelegate, _ baseFlowDataSource: Core.BaseFlowDataSource, _ customModuleAnalytics: Any?, _ subJourney: Core.Journey?, _ value: Any?) -> UIKit.UIViewController
  func canStart() -> Swift.Bool
  func getName() -> Swift.String
  func handleGo(to journey: Core.Journey, in viewController: UIKit.UIViewController, with value: Any?)
  func handleGet(from journey: Core.Journey, to subJourney: Core.Journey?, with baseFlowDelegate: Core.BaseFlowDelegate, analytics: Any?) -> UIKit.UIViewController
}
public protocol BaseViewModelProtocol {
  var isIndex: Swift.Bool { get set }
  func getBusinessModel<BusinessModel>() -> BusinessModel?
  func getAnalytics<AnalyticsModel>() -> AnalyticsModel?
  func getFlow<FlowDelegate>() -> FlowDelegate?
}
public protocol ViewModelProtocol : Core.BaseViewModelProtocol {
  associatedtype BusinessModel
  associatedtype AnalyticsModel
  associatedtype FlowDelegate
  var businessModel: Self.BusinessModel? { get }
  var analytics: Self.AnalyticsModel? { get }
  var flowDelegate: Self.FlowDelegate? { get set }
}
open class BaseViewModel<U, A, F> : Core.ViewModelProtocol {
  public typealias BusinessModel = U
  public typealias AnalyticsModel = A
  public typealias FlowDelegate = F
  public var businessModel: Core.BaseViewModel<U, A, F>.BusinessModel?
  public var analytics: Core.BaseViewModel<U, A, F>.AnalyticsModel?
  public var flowDelegate: Core.BaseViewModel<U, A, F>.FlowDelegate?
  public var isIndex: Swift.Bool
  public init(businessModel: Core.BaseViewModel<U, A, F>.BusinessModel?, analytics: Core.BaseViewModel<U, A, F>.AnalyticsModel?, flowDelegate: Core.BaseViewModel<U, A, F>.FlowDelegate?, isIndex: Swift.Bool = false)
  public func getBusinessModel<BusinessModel>() -> BusinessModel?
  public func getAnalytics<AnalyticsModel>() -> AnalyticsModel?
  public func getFlow<FlowDelegate>() -> FlowDelegate?
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class AppNavigation {
  public static let shared: Core.AppNavigation
  final public let navigationController: UIKit.UINavigationController
  final public func push(_ journey: Core.Journey, from currentViewController: UIKit.UIViewController?, animated: Swift.Bool = true)
  final public func popViewController(animated: Swift.Bool = true)
  @discardableResult
  final public func popToViewControllerWithType<T>(_ type: T.Type) -> Swift.Array<UIKit.UIViewController>? where T : UIKit.UIViewController
  final public func present(_ viewController: UIKit.UIViewController, animated: Swift.Bool = true, completion: (() -> Swift.Void)? = nil)
  @discardableResult
  final public func resolve(_ rawDeeplink: Swift.String?) -> Swift.Bool
  final public func resolveDeeplinkIfNeeded()
  final public func register(_ jorneys: Swift.Array<Core.Journey>, with stater: Core.ModuleHandler)
  final public func getHandler(from jorney: Core.Journey) -> Core.ModuleHandler?
  final public func start(_ journey: Core.Journey, to subJourney: Core.Journey? = nil, from currentJourney: Core.Journey? = nil, with url: Foundation.URL? = nil, baseFlowDelegate: Core.BaseFlowDelegate = AppNavigation.shared, baseFlowDataSource: Core.BaseFlowDataSource = AppNavigation.shared, customModuleAnalytics: Any? = nil, value: Any? = nil) -> UIKit.UIViewController
  final public func show(_ journeys: Swift.Array<Core.Journey>, from currentViewController: UIKit.UIViewController? = nil, animated: Swift.Bool)
  @objc deinit
}
extension Core.AppNavigation : Core.BaseFlowDelegate {
  final public func perform(_ action: Core.BaseFlowDelegateAction, in viewController: UIKit.UIViewController, with value: Any?)
}
extension Core.AppNavigation : Core.BaseFlowDataSource {
  final public func get(_ journey: Core.Journey, from currentJourney: Core.Journey, with baseFlowDelegate: Core.BaseFlowDelegate, customAnalytics: Any?) -> UIKit.UIViewController
}
extension UIKit.UINavigationController {
  @discardableResult
  @_Concurrency.MainActor(unsafe) public func popToViewControllerWithType<T>(_ type: T.Type) -> [UIKit.UIViewController]? where T : UIKit.UIViewController
}
extension UIKit.UIViewController {
  @_Concurrency.MainActor(unsafe) public static func instantiateViewController<T>(ofType type: T.Type, in storyboardName: Swift.String = "Main") -> T? where T : UIKit.UIViewController
  @_Concurrency.MainActor(unsafe) public var isModal: Swift.Bool {
    get
  }
  @_Concurrency.MainActor(unsafe) public func popToViewController<T>(_ type: T.Type) where T : UIKit.UIViewController
  @_Concurrency.MainActor(unsafe) public func pop(animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) public func popToRootViewController(animated: Swift.Bool)
}
public protocol BaseViewControllerProtocol {
  associatedtype ViewModel
  var viewModel: Self.ViewModel? { get set }
}
@_Concurrency.MainActor(unsafe) open class BaseViewController<ViewModel> : UIKit.UIViewController, Core.BaseViewControllerProtocol {
  @_Concurrency.MainActor(unsafe) public var viewModel: ViewModel?
  @_Concurrency.MainActor(unsafe) public init(viewModel: ViewModel?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) open func checkDeeplinkIfNeeded()
  @objc deinit
}
